/**
 *
 * Definition of the endpoints related to users
 *
 */

import bcrypt from "bcryptjs";
import Queue from "bull";
import dbClient from "../utils/db";

// create a new queue and connect it to local Redis server
const userQueue = new Queue("userQueue", "redis://127.0.0.1:6379");

class UsersController {
  static async postNew(req, res) {
    // get email & password from request body
    const { email } = req.body;
    const { password } = req.body;

    // validate required parameters
    // missing email
    if (!email) {
      return res.status(400).json({ error: "Missing email" });
    }
    // missing password
    if (!password) {
      return res.status(400).json({ error: "Missing password" });
    }

    try {
      // get all the users from the db
      const users = dbClient.db.collection("users");
      // find any user with the email
      const user = await users.findOne({ email });

      // if a user exists with the email
      if (user) {
        return res.status(400).json({ error: "Already exist" });
      }

      // hash password
      const hashedPassword = bcrypt.hashSync(password, 10);

      // insert the user in the 'users' collection
      const result = await users.insertOne({ email, password: hashedPassword });

      // add a job to userQueue
      await userQueue.add({ userId: result.insertedId });

      // return the new user with
      // only the email and the id (auto generated by MongoDB)
      // with a status code 201
      return res.status(201).json({ id: result.insertedId, email });
    } catch (error) {
      console.error("Error in postNew:", error);
      return res.status(500).json({ error: "Internal server error" });
    }
  }
}

export default UsersController;
